/**
 * Dohvaća historiju automatskih zamjena viška goriva za određeni tank
 */
export const getExchangeHistory = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { tankId, tankType = 'all' } = req.params;
    const { page = '1', pageSize = '10' } = req.query;
    
    // Transformacija parametara u brojeve
    const tankIdNum = tankId ? parseInt(tankId, 10) : undefined;
    const pageNum = Math.max(1, parseInt(page as string, 10));
    const pageSizeNum = Math.min(100, Math.max(1, parseInt(pageSize as string, 10))); // Ograničenje od 1-100
    
    // Izračunavanje offseta za paginaciju
    const skip = (pageNum - 1) * pageSizeNum;
    
    // Kreiranje filtera prema parametrima
    const filters: any = {
      is_excess_transfer: true // Ovo filtrira samo automatske zamjene
    };
    
    // Dodaj filter za specifični tank ako je naveden
    if (tankIdNum) {
      if (tankType === 'mobile') {
        filters.mobile_tank_id = tankIdNum;
      } else if (tankType === 'fixed') {
        filters.fixed_tank_id = tankIdNum;
      } else {
        // Ako je 'all', tražimo bilo koji od ova dva tipa
        filters.OR = [
          { mobile_tank_id: tankIdNum },
          { fixed_tank_id: tankIdNum }
        ];
      }
    }
    
    // Dohvat podataka o zamjenama iz transakcija
    const exchangeHistory = await prisma.fuelTransactions.findMany({
      where: filters,
      orderBy: {
        transaction_date: 'desc'
      },
      skip,
      take: pageSizeNum,
      include: {
        mobileTank: {
          select: {
            registration_number: true,
            capacity: true
          }
        },
        fixedTank: {
          select: {
            tank_name: true,
            location_description: true
          }
        }
      }
    });
    
    // Brojanje ukupnih rezultata za paginaciju
    const totalCount = await prisma.fuelTransactions.count({
      where: filters
    });
    
    // Izračunavanje ukupnog broja stranica
    const totalPages = Math.ceil(totalCount / pageSizeNum);
    
    res.status(200).json({
      success: true,
      data: exchangeHistory,
      pagination: {
        page: pageNum,
        pageSize: pageSizeNum,
        totalCount,
        totalPages
      }
    });
    
  } catch (error) {
    logger.error(`Greška prilikom dohvaćanja historije zamjena: ${error instanceof Error ? error.message : String(error)}`);
    res.status(500).json({
      success: false,
      message: "Došlo je do greške prilikom dohvaćanja historije automatskih zamjena viška goriva"
    });
  }
}

/**
 * Dohvaća detaljne informacije o specifičnoj zamjeni viška goriva
 */
export const getExchangeDetails = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { exchangeId } = req.params;
    
    if (!exchangeId) {
      res.status(400).json({
        success: false,
        message: "ID zamjene je obavezan parametar"
      });
      return;
    }
    
    const exchangeIdNum = parseInt(exchangeId, 10);
    
    if (isNaN(exchangeIdNum)) {
      res.status(400).json({
        success: false,
        message: "ID zamjene mora biti broj"
      });
      return;
    }
    
    // Dohvati transakciju zamjene i sve povezane transakcije (par može imati 2 zapisa)
    const mainTransaction = await prisma.fuelTransactions.findUnique({
      where: {
        id: exchangeIdNum,
        is_excess_transfer: true // Osigurava da se radi o zamjeni viška
      },
      include: {
        mobileTank: {
          select: {
            id: true,
            registration_number: true,
            capacity: true,
            current_quantity_liters: true,
            current_quantity_kg: true
          }
        },
        fixedTank: {
          select: {
            id: true,
            tank_name: true,
            location_description: true,
            current_quantity_liters: true,
            current_quantity_kg: true
          }
        }
      }
    });
    
    if (!mainTransaction) {
      res.status(404).json({
        success: false,
        message: "Zamjena s navedenim ID-em nije pronađena"
      });
      return;
    }
    
    // Dohvati povezanu transakciju (ako postoji)
    // Ako je glavna transakcija MOBILE_TO_FIXED, tražimo FIXED_TO_MOBILE i obrnuto
    const relatedTransactions = await prisma.fuelTransactions.findMany({
      where: {
        is_excess_transfer: true,
        id: { not: exchangeIdNum },
        OR: [
          // Traži povezanu transakciju koja dijeli isti vremenski okvir (unutar 10 sekundi)
          {
            transaction_date: {
              gte: new Date(mainTransaction.transaction_date.getTime() - 10000),
              lte: new Date(mainTransaction.transaction_date.getTime() + 10000)
            },
            mobile_tank_id: mainTransaction.mobile_tank_id,
            fixed_tank_id: mainTransaction.fixed_tank_id
          }
        ]
      }
    });
    
    // Format za odgovor koji uključuje glavnu transakciju i povezane transakcije
    const exchangeDetails: any = {
      mainTransaction,
      relatedTransactions,
      summary: {
        totalTransactions: 1 + relatedTransactions.length,
        exchangeDate: mainTransaction.transaction_date,
        mobileTankInfo: mainTransaction.mobileTank,
        fixedTankInfo: mainTransaction.fixedTank,
        sourceMrn: mainTransaction.source_mrn
      }
    };
    
    // Izračunaj ukupno litara i kg koji su bili predmet zamjene
    const totalLiters = [mainTransaction, ...relatedTransactions].reduce(
      (sum, tx) => sum + parseFloat(tx.quantity_liters.toString()), 
      0
    );
    
    const totalKg = [mainTransaction, ...relatedTransactions].reduce(
      (sum, tx) => sum + parseFloat(tx.quantity_kg.toString()), 
      0
    );
    
    exchangeDetails.summary.totalLiters = totalLiters;
    exchangeDetails.summary.totalKg = totalKg;
    
    res.status(200).json({
      success: true,
      data: exchangeDetails
    });
    
  } catch (error) {
    logger.error(`Greška prilikom dohvaćanja detalja zamjene: ${error instanceof Error ? error.message : String(error)}`);
    res.status(500).json({
      success: false,
      message: "Došlo je do greške prilikom dohvaćanja detalja automatske zamjene"
    });
  }
}
